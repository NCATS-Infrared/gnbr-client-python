# coding: utf-8

"""
    Translator Knowledge Beacon API

    This is the Translator Knowledge Beacon web service application programming interface (API).   # noqa: E501

    OpenAPI spec version: 1.0.16
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.beacon_concept_detail import BeaconConceptDetail  # noqa: F401,E501


class BeaconConceptWithDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'synonyms': 'list[str]',
        'definition': 'str',
        'details': 'list[BeaconConceptDetail]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'synonyms': 'synonyms',
        'definition': 'definition',
        'details': 'details'
    }

    def __init__(self, id=None, name=None, type=None, synonyms=None, definition=None, details=None):  # noqa: E501
        """BeaconConceptWithDetails - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._type = None
        self._synonyms = None
        self._definition = None
        self._details = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if synonyms is not None:
            self.synonyms = synonyms
        if definition is not None:
            self.definition = definition
        if details is not None:
            self.details = details

    @property
    def id(self):
        """Gets the id of this BeaconConceptWithDetails.  # noqa: E501

        local object identifier for the concept in the specified knowledge source database   # noqa: E501

        :return: The id of this BeaconConceptWithDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BeaconConceptWithDetails.

        local object identifier for the concept in the specified knowledge source database   # noqa: E501

        :param id: The id of this BeaconConceptWithDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BeaconConceptWithDetails.  # noqa: E501

        canonical human readable name of the concept   # noqa: E501

        :return: The name of this BeaconConceptWithDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BeaconConceptWithDetails.

        canonical human readable name of the concept   # noqa: E501

        :param name: The name of this BeaconConceptWithDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this BeaconConceptWithDetails.  # noqa: E501

        concept semantic type   # noqa: E501

        :return: The type of this BeaconConceptWithDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BeaconConceptWithDetails.

        concept semantic type   # noqa: E501

        :param type: The type of this BeaconConceptWithDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def synonyms(self):
        """Gets the synonyms of this BeaconConceptWithDetails.  # noqa: E501

        list of synonyms for concept   # noqa: E501

        :return: The synonyms of this BeaconConceptWithDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this BeaconConceptWithDetails.

        list of synonyms for concept   # noqa: E501

        :param synonyms: The synonyms of this BeaconConceptWithDetails.  # noqa: E501
        :type: list[str]
        """

        self._synonyms = synonyms

    @property
    def definition(self):
        """Gets the definition of this BeaconConceptWithDetails.  # noqa: E501

        concept definition   # noqa: E501

        :return: The definition of this BeaconConceptWithDetails.  # noqa: E501
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this BeaconConceptWithDetails.

        concept definition   # noqa: E501

        :param definition: The definition of this BeaconConceptWithDetails.  # noqa: E501
        :type: str
        """

        self._definition = definition

    @property
    def details(self):
        """Gets the details of this BeaconConceptWithDetails.  # noqa: E501


        :return: The details of this BeaconConceptWithDetails.  # noqa: E501
        :rtype: list[BeaconConceptDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this BeaconConceptWithDetails.


        :param details: The details of this BeaconConceptWithDetails.  # noqa: E501
        :type: list[BeaconConceptDetail]
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BeaconConceptWithDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
