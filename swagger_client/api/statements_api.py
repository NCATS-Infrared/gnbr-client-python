# coding: utf-8

"""
    Translator Knowledge Beacon API

    This is the Translator Knowledge Beacon web service application programming interface (API).   # noqa: E501

    OpenAPI spec version: 1.0.16
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StatementsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_evidence(self, statement_id, **kwargs):  # noqa: E501
        """get_evidence  # noqa: E501

        Retrieves a (paged) list of annotations cited as evidence for a specified concept-relationship statement   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_evidence(statement_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str statement_id: (url-encoded) CURIE identifier of the concept-relationship statement (\"assertion\", \"claim\") for which associated evidence is sought  (required)
        :param str keywords: (url-encoded, space delimited) keyword filter to apply against the label field of the annotation 
        :param int page_number: (1-based) number of the page to be returned in a paged set of query results 
        :param int page_size: number of cited references per page to be returned in a paged set of query results 
        :return: list[BeaconAnnotation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_evidence_with_http_info(statement_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_evidence_with_http_info(statement_id, **kwargs)  # noqa: E501
            return data

    def get_evidence_with_http_info(self, statement_id, **kwargs):  # noqa: E501
        """get_evidence  # noqa: E501

        Retrieves a (paged) list of annotations cited as evidence for a specified concept-relationship statement   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_evidence_with_http_info(statement_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str statement_id: (url-encoded) CURIE identifier of the concept-relationship statement (\"assertion\", \"claim\") for which associated evidence is sought  (required)
        :param str keywords: (url-encoded, space delimited) keyword filter to apply against the label field of the annotation 
        :param int page_number: (1-based) number of the page to be returned in a paged set of query results 
        :param int page_size: number of cited references per page to be returned in a paged set of query results 
        :return: list[BeaconAnnotation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['statement_id', 'keywords', 'page_number', 'page_size']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_evidence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'statement_id' is set
        if ('statement_id' not in params or
                params['statement_id'] is None):
            raise ValueError("Missing the required parameter `statement_id` when calling `get_evidence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'statement_id' in params:
            path_params['statementId'] = params['statement_id']  # noqa: E501

        query_params = []
        if 'keywords' in params:
            query_params.append(('keywords', params['keywords']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/evidence/{statementId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BeaconAnnotation]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_statements(self, s, **kwargs):  # noqa: E501
        """get_statements  # noqa: E501

        Given a specified set of [CURIE-encoded](https://www.w3.org/TR/curie/)  'source' ('s') concept identifiers,  retrieves a paged list of relationship statements where either the subject or object concept matches any of the input 'source' concepts provided.  Optionally, a set of 'target' ('t') concept  identifiers may also be given, in which case a member of the 'target' identifier set should match the concept opposing the 'source' in the  statement, that is, if the'source' matches a subject, then the  'target' should match the object of a given statement (or vice versa).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_statements(s, async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] s: a set of [CURIE-encoded](https://www.w3.org/TR/curie/) identifiers of  'source' concepts possibly known to the beacon. Unknown CURIES should simply be ignored (silent match failure).  (required)
        :param str relations: a (url-encoded, space-delimited) string of predicate relation identifiers with which to constrain the statement relations retrieved  for the given query seed concept. The predicate ids sent should  be as published by the beacon-aggregator by the /predicates API endpoint. 
        :param list[str] t: (optional) an array set of [CURIE-encoded](https://www.w3.org/TR/curie/)  identifiers of 'target' concepts possibly known to the beacon.  Unknown CURIEs should simply be ignored (silent match failure). 
        :param str keywords: a (url-encoded, space-delimited) string of keywords or substrings against which to match the subject, predicate or object names of the set of concept-relations matched by any of the input exact matching concepts 
        :param str types: a (url-encoded, space-delimited) string of concept types (specified as codes gene, pathway, etc.) to which to constrain the subject or object concepts associated with the query seed concept (see [Biolink Model](https://biolink.github.io/biolink-model) for the full list of codes) 
        :param int page_number: (1-based) number of the page to be returned in a paged set of query results 
        :param int page_size: number of concepts per page to be returned in a paged set of query results 
        :return: list[BeaconStatement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_statements_with_http_info(s, **kwargs)  # noqa: E501
        else:
            (data) = self.get_statements_with_http_info(s, **kwargs)  # noqa: E501
            return data

    def get_statements_with_http_info(self, s, **kwargs):  # noqa: E501
        """get_statements  # noqa: E501

        Given a specified set of [CURIE-encoded](https://www.w3.org/TR/curie/)  'source' ('s') concept identifiers,  retrieves a paged list of relationship statements where either the subject or object concept matches any of the input 'source' concepts provided.  Optionally, a set of 'target' ('t') concept  identifiers may also be given, in which case a member of the 'target' identifier set should match the concept opposing the 'source' in the  statement, that is, if the'source' matches a subject, then the  'target' should match the object of a given statement (or vice versa).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_statements_with_http_info(s, async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] s: a set of [CURIE-encoded](https://www.w3.org/TR/curie/) identifiers of  'source' concepts possibly known to the beacon. Unknown CURIES should simply be ignored (silent match failure).  (required)
        :param str relations: a (url-encoded, space-delimited) string of predicate relation identifiers with which to constrain the statement relations retrieved  for the given query seed concept. The predicate ids sent should  be as published by the beacon-aggregator by the /predicates API endpoint. 
        :param list[str] t: (optional) an array set of [CURIE-encoded](https://www.w3.org/TR/curie/)  identifiers of 'target' concepts possibly known to the beacon.  Unknown CURIEs should simply be ignored (silent match failure). 
        :param str keywords: a (url-encoded, space-delimited) string of keywords or substrings against which to match the subject, predicate or object names of the set of concept-relations matched by any of the input exact matching concepts 
        :param str types: a (url-encoded, space-delimited) string of concept types (specified as codes gene, pathway, etc.) to which to constrain the subject or object concepts associated with the query seed concept (see [Biolink Model](https://biolink.github.io/biolink-model) for the full list of codes) 
        :param int page_number: (1-based) number of the page to be returned in a paged set of query results 
        :param int page_size: number of concepts per page to be returned in a paged set of query results 
        :return: list[BeaconStatement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['s', 'relations', 't', 'keywords', 'types', 'page_number', 'page_size']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 's' is set
        if ('s' not in params or
                params['s'] is None):
            raise ValueError("Missing the required parameter `s` when calling `get_statements`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 's' in params:
            query_params.append(('s', params['s']))  # noqa: E501
            collection_formats['s'] = 'multi'  # noqa: E501
        if 'relations' in params:
            query_params.append(('relations', params['relations']))  # noqa: E501
        if 't' in params:
            query_params.append(('t', params['t']))  # noqa: E501
            collection_formats['t'] = 'multi'  # noqa: E501
        if 'keywords' in params:
            query_params.append(('keywords', params['keywords']))  # noqa: E501
        if 'types' in params:
            query_params.append(('types', params['types']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/statements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BeaconStatement]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
